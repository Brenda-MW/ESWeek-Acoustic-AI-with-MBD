function [featureTable,outputTable] = diagnosticFeatures1(inputData)
%DIAGNOSTICFEATURES recreates results in Diagnostic Feature Designer.
%
% Input:
%  inputData: A table or a cell array of tables/matrices containing the
%  data as those imported into the app.
%
% Output:
%  featureTable: A table containing all features and condition variables.
%  outputTable: A table containing the computation results.
%
% This function computes features:
%  pressure_tsmodel/Mean
%  pressure_tsmodel/RMS
%  pressure_tsmodel/Kurtosis
%  flow_tsmodel/Mean
%  flow_tsmodel/RMS
%
% Organization of the function:
% 1. Compute signals/spectra/features
% 2. Extract computed features into a table
%
% Modify the function to add or remove data processing, feature generation
% or ranking operations.

% Auto-generated by MATLAB on 12-Sep-2024 14:32:56

% Create output ensemble.
outputEnsemble = workspaceEnsemble(inputData,'DataVariables',["flow";"pressure"],'ConditionVariables',"faultCode");

% Reset the ensemble to read from the beginning of the ensemble.
reset(outputEnsemble);

% Append new signal or feature names to DataVariables.
outputEnsemble.DataVariables = unique([outputEnsemble.DataVariables;"pressure_tsmodel";"flow_tsmodel"],'stable');

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = ["pressure","flow"];

% Initialize a cell array to store all the results.
allMembersResult = {};

% Loop through all ensemble members to read and write data.
while hasdata(outputEnsemble)
    % Read one member.
    member = read(outputEnsemble);

    % Get all input variables.
    pressure = readMemberData(member,"pressure",["Time","Data"]);
    flow = readMemberData(member,"flow",["Time","Data"]);

    % Initialize a table to store results.
    memberResult = table;

    %% TimeSeriesModelFeatures
    try
        % Compute model-based time series features.
        x = pressure.Data;
        t = pressure.Time;
        y = x - mean(x,'omitnan');
        N = numel(x);

        % Estimate autoregressive model.
        p = 10;
        R = xcorr(y,p,'biased');
        R(1:p) = [];
        [a,Ep] = levinson(R,p);

        % Compute effective sampling rate.
        tNumeric = time2num(t,"seconds");
        Fs = effectivefs(tNumeric);

        % Compute model poles.
        r = sort(roots(a),'descend');
        s = Fs*log(r);
        Fn = abs(s)/2/pi;
        Zn = -real(s)./abs(s);

        % Estimate process noise.
        w = filter(a,1,y);

        % Estimate model residuals.
        e = filter(a,1,x);

        % Extract individual feature values.
        Mean = mean(e,'omitnan');
        RMS = rms(e,'omitnan');
        Kurtosis = kurtosis(e);

        % Concatenate signal features.
        featureValues = [Mean,RMS,Kurtosis];

        % Store computed features in a table.
        featureNames = {'Mean','RMS','Kurtosis'};
        pressure_tsmodel = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Store computed features in a table.
        featureValues = NaN(1,3);
        featureNames = {'Mean','RMS','Kurtosis'};
        pressure_tsmodel = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({pressure_tsmodel},'VariableNames',{'pressure_tsmodel'})]; %#ok<AGROW>

    %% TimeSeriesModelFeatures
    try
        % Compute model-based time series features.
        x = flow.Data;
        t = flow.Time;
        y = x - mean(x,'omitnan');
        N = numel(x);

        % Estimate autoregressive model.
        p = 10;
        R = xcorr(y,p,'biased');
        R(1:p) = [];
        [a,Ep] = levinson(R,p);

        % Compute effective sampling rate.
        tNumeric = time2num(t,"seconds");
        Fs = effectivefs(tNumeric);

        % Compute model poles.
        r = sort(roots(a),'descend');
        s = Fs*log(r);
        Fn = abs(s)/2/pi;
        Zn = -real(s)./abs(s);

        % Estimate process noise.
        w = filter(a,1,y);

        % Estimate model residuals.
        e = filter(a,1,x);

        % Extract individual feature values.
        Mean = mean(e,'omitnan');
        RMS = rms(e,'omitnan');

        % Concatenate signal features.
        featureValues = [Mean,RMS];

        % Store computed features in a table.
        featureNames = {'Mean','RMS'};
        flow_tsmodel = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Store computed features in a table.
        featureValues = NaN(1,2);
        featureNames = {'Mean','RMS'};
        flow_tsmodel = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({flow_tsmodel},'VariableNames',{'flow_tsmodel'})]; %#ok<AGROW>

    % Append all member results to the cell array.
    allMembersResult = [allMembersResult; {memberResult}]; %#ok<AGROW>
end

% Write the results for all members to the ensemble.
writeToMembers(outputEnsemble,allMembersResult)

% Gather all features into a table.
selectedFeatureNames = ["pressure_tsmodel/Mean","pressure_tsmodel/RMS","pressure_tsmodel/Kurtosis","flow_tsmodel/Mean","flow_tsmodel/RMS"];
featureTable = readFeatureTable(outputEnsemble,'Features',selectedFeatureNames);

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = unique([outputEnsemble.DataVariables;outputEnsemble.ConditionVariables;outputEnsemble.IndependentVariables],'stable');

% Gather results into a table.
if nargout > 1
    outputTable = readall(outputEnsemble);
end
end
